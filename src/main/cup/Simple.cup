/* package et imports */
package fr.usmb.m1isc.compilation.simple;
import java_cup.runtime.Symbol;
import java.util.HashMap;

// nom de la classe a generer
class SimpleParser;

/* inclusion du code */

action code {:
    // pour utilisation dans les actions (classe action)

    // Dictionnaire de variables
    private HashMap<String,Integer> variables = new HashMap<>();
:};


parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);
            if (s.left >= 0) {
                /* Ajoute le numero de ligne  */
                m = m + "Ligne " + (s.left+1) + " ";
            }
            if (s.right >= 0) {
                /* Ajoute le numero de colonne  */
                m = m + "Colonne " + (s.right+1) + " ";
            }
            if (s.left >=0  || s.right >= 0) {
                m = m + ": ";
            }
        }
        m = m + "Erreur de syntaxe";
        System.out.println(m);
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal PLUS, PVIRG, MOINS, MULT, DIV, MOD, OP_UNAIRE, PAR_O, PAR_F, LET, EGAL;
terminal Integer NOMBRE;
terminal String NOMVAR;

/* non terminaux */
non terminal ens_expr, expr;
non terminal Integer expression, assignation ;

/* Priorités opératoires (du - prio au + prio) */
precedence left PLUS, MOINS;
precedence left MULT, DIV, MOD;
precedence left OP_UNAIRE;
precedence left NOMVAR;

/* grammaire */

// On a un ensemble d'expressions
ens_expr	::= expr ens_expr
			  | expr
			  ;

// Délimitation de chaque expression par un point virgule
expr 		::= expression:e PVIRG:pv   {: System.out.println("Resultat = "+e); :}
                | assignation:e PVIRG:pv  {: System.out.println("Assignation OK"); :}
                ;

// Assignation à une variable
assignation ::= LET NOMVAR:n EGAL expression:e 	{: variables.put(n,e); RESULT = e; :}
              ;

// Nos règles pour chaque opérateur/cas particulier, donc une subdivision de "expr"
expression 	::= NOMBRE:e                            {: RESULT = e ; :}
			  | expression:e1 PLUS expression:e2    {: RESULT = e1+e2 ; :}
			  | expression:e1 MOINS expression:e2   {: RESULT = e1-e2 ; :}
			  | MOINS expression:e   				{: RESULT = -e ; :} 	%prec OP_UNAIRE
			  | expression:e1 MULT expression:e2     {: RESULT = e1*e2 ; :}
			  | expression:e1 DIV expression:e2     {: if (e2 == 0) { RESULT = 0; System.err.println("Impossible, division par 0"); }
													   else { RESULT = e1/e2; } :}
			  | expression:e1 MOD expression:e2     {: if (e2 == 0) { RESULT = 0; System.err.println("Impossible, division par 0"); }
													   else { RESULT = e1%e2; } :}
			  | PAR_O expression:e PAR_F            {: RESULT = e ; :}
              | NOMVAR:n                          	{: if(variables.get(n) != null) { RESULT = variables.get(n); }
                                                                     else { RESULT = 0; System.err.println("Impossible, variable inexistante"); } :}
              ;